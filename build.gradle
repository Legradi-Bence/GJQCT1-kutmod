plugins {
    id 'application'
    id 'java'
    id 'idea'
    id 'org.openjfx.javafxplugin' version '0.0.7'
}

description = 'RobotiCoffee application'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

ext.jmonkeyengineVersion = '3.7.0-stable'

application {
    mainClass = 'roboticoffee.RobotiCoffee'
}

repositories {
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    
}

application {

    applicationDefaultJvmArgs = [
        '--add-exports=javafx.graphics/com.sun.javafx.cursor=ALL-UNNAMED',
        '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
        '--add-exports=javafx.graphics/com.sun.javafx.embed=ALL-UNNAMED',
        '--add-exports=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED'
    ]

    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        applicationDefaultJvmArgs = ['-XstartOnFirstThread'] // this is when using a Mac as a development machine which requires the AppKit main UI thread to be used for GUI applications
    }
}

run {
    workingDir = projectDir
    jvmArgs = [
        '--add-exports=javafx.graphics/com.sun.javafx.cursor=ALL-UNNAMED',
        '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
        '--add-exports=javafx.graphics/com.sun.javafx.embed=ALL-UNNAMED',
        '--add-exports=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED'
    ]
}

javafx {
    version = "20"
    modules = [ 'javafx.controls' , 'javafx.fxml' , "javafx.graphics" ]
}

dependencies {
    // You can read more about how to add dependencies here:
    //   https://docs.gradle.org/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies

    implementation 'org.jmonkeyengine:jme3-core:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion


    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmonkeyengineVersion

    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.3'

    
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'com.google.guava:guava:33.4.6-jre'
    implementation 'org.codehaus.groovy:groovy-all:3.0.17'

    implementation 'org.openjfx:javafx-controls:20'
    implementation 'org.openjfx:javafx-fxml:20'

    implementation 'io.tlf.jme:jme-jfx:1.2.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

distZip {
    //having a degenerate folder within the dist zip complicates generating the other zips
    eachFile { file ->
        String path = file.relativePath
        file.setPath(path.substring(path.indexOf("/") + 1, path.length()))
    }
    includeEmptyDirs = false
}



task buildAllDistributions{
    group = 'distribution'
    dependsOn 'zipWindowsDistribution'
    

    doLast {
        println("Distributions created in build/distributions folder")
    }
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}

task fund(){
    doLast {
       java.awt.Desktop.desktop.browse "https://start.jmonkeyengine.org/#!funding=JME_DESKTOP,LEMUR,LOG4J2".toURI()
    }
}
